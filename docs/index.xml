<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sigstore</title>
    <link>/</link>
    <description>Recent content on sigstore</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Dec 2020 12:07:22 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rekor Directory</title>
      <link>/rekor_directory/</link>
      <pubDate>Tue, 12 Jan 2021 13:46:19 +0000</pubDate>
      
      <guid>/rekor_directory/</guid>
      <description>A list of current public instances of rekor
   Server Purpose     https://rekor.dev/api/v1/log Sandbox     Note: servers listed as &amp;lsquo;Sandbox&amp;rsquo; do not guarantee data persistence at presence. Only production systems provide those guarantees  </description>
    </item>
    
    <item>
      <title>Plugable Types</title>
      <link>/docs/plugable_types/</link>
      <pubDate>Fri, 11 Dec 2020 12:07:22 +0000</pubDate>
      
      <guid>/docs/plugable_types/</guid>
      <description>Description Rekor supports pluggable types (aka different schemas) for entries stored in the transparency log. This will allow you to develop your own manifest type in your prefered formatting style (json|yaml|xml).
Currently supported types  Rekord (default type) schema  Versions: 0.0.1    Base Schema The base schema for all types is modeled off of the schema used by Kubernetes and can be found in openapi.yaml as #/definitions/ProposedEntry:</description>
    </item>
    
    <item>
      <title>Rekor API Client Example</title>
      <link>/docs/api_example/</link>
      <pubDate>Fri, 11 Dec 2020 10:09:51 +0000</pubDate>
      
      <guid>/docs/api_example/</guid>
      <description>We use the OpenAPI specification in rekor making it easy to create your own RestFul API client.
If you&amp;rsquo;re interested in developing an application that can store or retrive entries into a Rekor transparency log, we recommend you take a look at the swagger online editor.</description>
    </item>
    
    <item>
      <title>Run a Rekor Server</title>
      <link>/get_started/server/</link>
      <pubDate>Tue, 08 Dec 2020 08:12:58 +0000</pubDate>
      
      <guid>/get_started/server/</guid>
      <description>There are a few ways to deploy a Rekor Server.
We have a docker-compose file available
A kubernetes operator
Or you could do this manually and build rekor yourself.
Manual Installation Prerequisites You will of course also need golang version 1.15 or greater and a $GOPATH set.
If you want to perform fast queries add redis, if not you will need to pass --enable_retrieve_api=false when running rekor-server in the later steps of this page.</description>
    </item>
    
    <item>
      <title>Rekor Command Line Interface</title>
      <link>/get_started/client/</link>
      <pubDate>Tue, 08 Dec 2020 08:06:07 +0000</pubDate>
      
      <guid>/get_started/client/</guid>
      <description>The following guide is targeted towards developers / software maintainers who would like to make a provenance entry into the rekor transparency log.
The steps outlined below will show how to sign your software and then use the rekor CLI to make and verify an entry.
Download the Rekor CLI application Prerequisites You will of course also need golang version 1.15 or greater and a $GOPATH set.
Build rekor go get -u -t -v github.</description>
    </item>
    
    <item>
      <title>Frequently Asked Questions</title>
      <link>/faq/</link>
      <pubDate>Mon, 07 Dec 2020 17:09:20 +0000</pubDate>
      
      <guid>/faq/</guid>
      <description>Seems like Rekor is centralised?  Yes, why not? There is no need for a distributed source of transparency. There can be multiple points of transparency which only adds more sources of security guarantee, not less. An entity can post to as many Rekorâ€™s as they want and inform users of where they post. We do encourage folks to use common public instances, but we don&amp;rsquo;t seek to enforce this. We do plan to look to produce a gossip protocol, for those that desire a more decentralised model (if the demand is shown).</description>
    </item>
    
    <item>
      <title>sigstore</title>
      <link>/what_is_sigstore/</link>
      <pubDate>Mon, 07 Dec 2020 17:09:20 +0000</pubDate>
      
      <guid>/what_is_sigstore/</guid>
      <description>sigstore is a Linux Foundation.
sigstore is a project with the goal of providing a public good / non-profit service to improve the open source software supply chain by easing the adoption of cryptographic software signing, backed by transparency log technologies.
sigstore will seek to empower software developers to securely sign software artifacts such as release files, container images, binaries, bill of material manifests and more. Signing materials are then stored into a tamper resistant public log</description>
    </item>
    
  </channel>
</rss>
